# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Java CI/CD with Maven and Docker

on:
  push:
    branches: ["main"]
    paths:
      - "movie-backend/**"
  pull_request:
    branches: ["main"]

jobs:
  build_eureka_server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven Eureka Service
        run: mvn -B package --file movie-backend/eureka-server/pom.xml
      - name: Build docker Eureka Service
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-eureka-server:latest -f movie-backend/eureka-server/Dockerfile movie-backend/eureka-server
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-eureka-server:latest

  build_config_server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven Config Service
        run: mvn -B package --file movie-backend/config-server/pom.xml
      - name: Build docker Config Service
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-config-server:latest -f movie-backend/config-server/Dockerfile --build-arg SPRING_CLOUD_CONFIG_SERVER_GITHUB_PASSWORD="${{ secrets.CONFIG_PASSWORD }}" movie-backend/config-server
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-config-server:latest

  build_api_gateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven Api Gateway
        run: mvn -B package --file movie-backend/api-gateway/pom.xml
      - name: Build docker Api Gateway
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-api-gateway:latest -f movie-backend/api-gateway/Dockerfile movie-backend/api-gateway
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-api-gateway:latest

  build_authentication_service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven Authentication Service
        run: mvn -B package --file movie-backend/authentication-service/pom.xml
      - name: Build docker Authentication Service
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-authentication-service:latest -f movie-backend/authentication-service/Dockerfile movie-backend/authentication-service
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-authentication-service:latest

  build_userprofile_service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven User Profile Service
        run: mvn -B package --file movie-backend/userprofile-service/pom.xml
      - name: Build docker User Profile Service
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-userprofile-service:latest -f movie-backend/userprofile-service/Dockerfile movie-backend/userprofile-service
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-userprofile-service:latest

  build_movie_service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven Movie Service
        run: mvn -B package --file movie-backend/movie-service/pom.xml
      - name: Build docker Movie Service
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-movie-service:latest -f movie-backend/movie-service/Dockerfile movie-backend/movie-service
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-movie-service:latest

  build_wishlist_service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven Wishlist Service
        run: mvn -B package --file movie-backend/wishlist-service/pom.xml
      - name: Build docker Wishlist Service
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-wishlist-service:latest -f movie-backend/wishlist-service/Dockerfile movie-backend/wishlist-service
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-wishlist-service:latest

  build_swagger_server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build Maven Swagger Server
        run: mvn -B package --file movie-backend/swagger-server/pom.xml
      - name: Build docker Swagger Server
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/movie-app-swagger-server:latest -f movie-backend/swagger-server/Dockerfile movie-backend/swagger-server
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/movie-app-swagger-server:latest
